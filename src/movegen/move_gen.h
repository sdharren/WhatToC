#ifndef MOVE_GEN_H
#define MOVE_GEN_H

#include <array>
#include <vector>

#include "move.h"
#include "../helpers/board_defs.h"
#include "../board/Board.h"

inline std::array<Bitboard, 64> ROOK_MAGICS = {
    0x8a80104000800020ULL, 0x140002000100040ULL, 0x2801880a0017001ULL, 0x100081001000420ULL, 0x200020010080420ULL,
    0x3001c0002010008ULL, 0x8480008002000100ULL, 0x2080088004402900ULL, 0x800098204000ULL, 0x2024401000200040ULL,
    0x100802000801000ULL, 0x120800800801000ULL, 0x208808088000400ULL, 0x2802200800400ULL, 0x2200800100020080ULL,
    0x801000060821100ULL, 0x80044006422000ULL, 0x100808020004000ULL, 0x12108a0010204200ULL, 0x140848010000802ULL,
    0x481828014002800ULL, 0x8094004002004100ULL, 0x4010040010010802ULL, 0x20008806104ULL, 0x100400080208000ULL,
    0x2040002120081000ULL, 0x21200680100081ULL, 0x20100080080080ULL, 0x2000a00200410ULL, 0x20080800400ULL,
    0x80088400100102ULL, 0x80004600042881ULL, 0x4040008040800020ULL, 0x440003000200801ULL, 0x4200011004500ULL,
    0x188020010100100ULL, 0x14800401802800ULL, 0x2080040080800200ULL, 0x124080204001001ULL, 0x200046502000484ULL,
    0x480400080088020ULL, 0x1000422010034000ULL, 0x30200100110040ULL, 0x100021010009ULL, 0x2002080100110004ULL,
    0x202008004008002ULL, 0x20020004010100ULL, 0x2048440040820001ULL, 0x101002200408200ULL, 0x40802000401080ULL,
    0x4008142004410100ULL, 0x2060820c0120200ULL, 0x1001004080100ULL, 0x20c020080040080ULL, 0x2935610830022400ULL,
    0x44440041009200ULL, 0x280001040802101ULL, 0x2100190040002085ULL, 0x80c0084100102001ULL, 0x4024081001000421ULL,
    0x20030a0244872ULL, 0x12001008414402ULL, 0x2006104900a0804ULL, 0x1004081002402ULL,
};

inline std::array<Bitboard, 64> ROOK_ATTACK_MASKS = {
    282578800148862ULL, 565157600297596ULL, 1130315200595066ULL, 2260630401190006ULL, 4521260802379886ULL,
    9042521604759646ULL, 18085043209519166ULL, 36170086419038334ULL, 282578800180736ULL, 565157600328704ULL,
    1130315200625152ULL, 2260630401218048ULL, 4521260802403840ULL, 9042521604775424ULL, 18085043209518592ULL,
    36170086419037696ULL, 282578808340736ULL, 565157608292864ULL, 1130315208328192ULL, 2260630408398848ULL,
    4521260808540160ULL, 9042521608822784ULL, 18085043209388032ULL, 36170086418907136ULL, 282580897300736ULL,
    565159647117824ULL, 1130317180306432ULL, 2260632246683648ULL, 4521262379438080ULL, 9042522644946944ULL,
    18085043175964672ULL, 36170086385483776ULL, 283115671060736ULL, 565681586307584ULL, 1130822006735872ULL,
    2261102847592448ULL, 4521664529305600ULL, 9042787892731904ULL, 18085034619584512ULL, 36170077829103616ULL,
    420017753620736ULL, 699298018886144ULL, 1260057572672512ULL, 2381576680245248ULL, 4624614895390720ULL,
    9110691325681664ULL, 18082844186263552ULL, 36167887395782656ULL, 35466950888980736ULL, 34905104758997504ULL,
    34344362452452352ULL, 33222877839362048ULL, 30979908613181440ULL, 26493970160820224ULL, 17522093256097792ULL,
    35607136465616896ULL, 9079539427579068672ULL, 8935706818303361536ULL, 8792156787827803136ULL,
    8505056726876686336ULL, 7930856604974452736ULL, 6782456361169985536ULL, 4485655873561051136ULL,
    9115426935197958144ULL,
};

inline std::array<int, 64> ROOK_SHIFT_BITS = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12,
};

inline std::array<Bitboard, 64> BISHOP_MAGICS = {
    0x40040844404084ULL, 0x2004208a004208ULL, 0x10190041080202ULL, 0x108060845042010ULL, 0x581104180800210ULL,
    0x2112080446200010ULL, 0x1080820820060210ULL, 0x3c0808410220200ULL, 0x4050404440404ULL, 0x21001420088ULL,
    0x24d0080801082102ULL, 0x1020a0a020400ULL, 0x40308200402ULL, 0x4011002100800ULL, 0x401484104104005ULL,
    0x801010402020200ULL, 0x400210c3880100ULL, 0x404022024108200ULL, 0x810018200204102ULL, 0x4002801a02003ULL,
    0x85040820080400ULL, 0x810102c808880400ULL, 0xe900410884800ULL, 0x8002020480840102ULL, 0x220200865090201ULL,
    0x2010100a02021202ULL, 0x152048408022401ULL, 0x20080002081110ULL, 0x4001001021004000ULL, 0x800040400a011002ULL,
    0xe4004081011002ULL, 0x1c004001012080ULL, 0x8004200962a00220ULL, 0x8422100208500202ULL, 0x2000402200300c08ULL,
    0x8646020080080080ULL, 0x80020a0200100808ULL, 0x2010004880111000ULL, 0x623000a080011400ULL, 0x42008c0340209202ULL,
    0x209188240001000ULL, 0x400408a884001800ULL, 0x110400a6080400ULL, 0x1840060a44020800ULL, 0x90080104000041ULL,
    0x201011000808101ULL, 0x1a2208080504f080ULL, 0x8012020600211212ULL, 0x500861011240000ULL, 0x180806108200800ULL,
    0x4000020e01040044ULL, 0x300000261044000aULL, 0x802241102020002ULL, 0x20906061210001ULL, 0x5a84841004010310ULL,
    0x4010801011c04ULL, 0xa010109502200ULL, 0x4a02012000ULL, 0x500201010098b028ULL, 0x8040002811040900ULL,
    0x28000010020204ULL, 0x6000020202d0240ULL, 0x8918844842082200ULL, 0x4010011029020020ULL,
};

inline std::array<Bitboard, 64> BISHOP_ATTACK_MASKS = {
    18049651735527936ULL, 70506452091904ULL, 275415828992ULL, 1075975168ULL, 38021120ULL, 8657588224ULL,
    2216338399232ULL, 567382630219776ULL, 9024825867763712ULL, 18049651735527424ULL, 70506452221952ULL,
    275449643008ULL, 9733406720ULL, 2216342585344ULL, 567382630203392ULL, 1134765260406784ULL, 4512412933816832ULL,
    9024825867633664ULL, 18049651768822272ULL, 70515108615168ULL, 2491752130560ULL, 567383701868544ULL,
    1134765256220672ULL, 2269530512441344ULL, 2256206450263040ULL, 4512412900526080ULL, 9024834391117824ULL,
    18051867805491712ULL, 637888545440768ULL, 1135039602493440ULL, 2269529440784384ULL, 4539058881568768ULL,
    1128098963916800ULL, 2256197927833600ULL, 4514594912477184ULL, 9592139778506752ULL, 19184279556981248ULL,
    2339762086609920ULL, 4538784537380864ULL, 9077569074761728ULL, 562958610993152ULL, 1125917221986304ULL,
    2814792987328512ULL, 5629586008178688ULL, 11259172008099840ULL, 22518341868716544ULL, 9007336962655232ULL,
    18014673925310464ULL, 2216338399232ULL, 4432676798464ULL, 11064376819712ULL, 22137335185408ULL, 44272556441600ULL,
    87995357200384ULL, 35253226045952ULL, 70506452091904ULL, 567382630219776ULL, 1134765260406784ULL,
    2832480465846272ULL, 5667157807464448ULL, 11333774449049600ULL, 22526811443298304ULL, 9024825867763712ULL,
    18049651735527936ULL,
};

inline std::array<int, 64> BISHOP_SHIFT_BITS = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6,
};

class MoveGenerator
{
public:
    std::vector<std::vector<Bitboard> > PAWN_ATTACK_TABLE;
    std::vector<Bitboard> KNIGHT_ATTACK_TABLE;
    std::vector<Bitboard> KING_ATTACK_TABLE;
    std::vector<std::vector<Bitboard> > ROOK_ATTACK_TABLE;
    std::vector<std::vector<Bitboard> > BISHOP_ATTACK_TABLE;

    MoveGenerator();
    void initialise_leaper_piece_attack_tables();
    Bitboard generate_pawn_attack_from_square(int square, int colour);
    Bitboard generate_knight_attack_from_square(int square);
    Bitboard generate_king_attack_from_square(int square);
    Bitboard generate_rook_attack_mask_from_square(int square);
    Bitboard generate_bishop_attack_mask_from_square(int square);

    void initialise_rook_attack_table();
    void initialise_bishop_attack_table();

    Bitboard generate_rook_attack_from_square(int square, Bitboard occupancy);
    Bitboard generate_bishop_attack_from_square(int square, Bitboard occupancy);
    Bitboard generate_queen_attack_from_square(int square, Bitboard occupancy);

    std::pair<std::vector<Move>, int>generate_all_pseudolegal_moves(Board &board);
    void generate_piece_pseudolegal_moves(std::vector<Move> &move_list, int &move_count, Board &board, int piece);
    void generate_castling_pseudolegal_moves(std::vector<Move> &move_list, int &move_count, Board &board);
    bool is_square_attacked_by_colour(int square, int colour, Board &board);

};

#endif //MOVE_GEN_H
